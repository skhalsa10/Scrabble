    /**
     *
     * @return this will return the best possible move on the board
     */
    private HashMap<ScrabbleBoardPoint, ScrabbleTile> findBestMoveSlow() {

        HashMap<ScrabbleBoardPoint, ScrabbleTile> maxMove = new HashMap<>();
        int scoreMaxMove = 0;

        //first get a list of played tiles via their points
        ArrayList<ScrabbleBoardPoint> playedPoints = board.getListPlayedTiles();

        //init horizontal
        HashMap<ScrabbleBoardPoint, ScrabbleTile> bestHorizontalMove = new HashMap<>();
        int bestHorizontalScore = 0;

        //init vertical
        HashMap<ScrabbleBoardPoint, ScrabbleTile> bestVerticalMove = new HashMap<>();
        int bestVerticalScore = 0;

        /*ArrayList<ScrabbleTile> test = new ArrayList<>();
        test.add(new ScrabbleTile('T',8));
        test.add(new ScrabbleTile('o',10));
        test.add(new ScrabbleTile('l',10));
        test.add(new ScrabbleTile('o',8));
        test.add(new ScrabbleTile('e',10));
        test.add(new ScrabbleTile('r',10));*/

        //iterate over every point
        //TODO filter p down to only the left edge and top edge
        for (ScrabbleBoardPoint p: playedPoints ) {
            bestHorizontalMove = bestHorizontalMoveAt(p, tileTray.getCopy(),new HashMap<>());
            //bestHorizontalScore= rules.calcScore(bestHorizontalMove,board);

            bestVerticalMove = bestVerticalMoveAt(p, tileTray.getCopy(),new HashMap<>());
            //bestVerticalScore = rules.calcScore(bestVerticalMove,board);

           /* if(bestHorizontalScore>=bestVerticalScore && bestHorizontalScore>scoreMaxMove){
                maxMove = bestHorizontalMove;
                scoreMaxMove = bestHorizontalScore;
            }
            if(bestVerticalScore>bestHorizontalScore && bestVerticalScore>scoreMaxMove){
                maxMove = bestVerticalMove;
                scoreMaxMove = bestVerticalScore;
            }*/


        }

        if(bestVerticalMove == null){
            System.out.println("uhoh!");
        }


        return bestVerticalMove;
    }


    /**
         * this will return the vertical move with the highest score at the point p
         * @param p point to find best move at
         * @param tiles tiles in hand to work with
         * @param move current move already played recursively needed
         * @return
         */
        private HashMap<ScrabbleBoardPoint, ScrabbleTile> bestVerticalMoveAt(ScrabbleBoardPoint p,
                                                                             ArrayList<ScrabbleTile> tiles,
                                                                             HashMap<ScrabbleBoardPoint, ScrabbleTile> move) {
            if(tiles == null) {
                System.out.println(tiles);
            }
            if(tiles.isEmpty()){
                //System.out.println("I got to the tray being empty");
                //if this is empty we just check if the move is valid
                if(rules.isMoveValid(move, board)){
                    //System.out.println("this should run");
                    printMove(move);
                    return move;
                }else {

                    return null;
                }
            }
            else if(tiles.size() == 1){
                //System.out.println("entering tile size 1 case");
                HashMap<ScrabbleBoardPoint, ScrabbleTile> moveT;
                HashMap<ScrabbleBoardPoint, ScrabbleTile> moveB;

                ScrabbleBoardPoint topOpen = getTopOpenP(p,move);
                ScrabbleBoardPoint bottomOpen = getBottomOpenP(p,move);

                //if there is no tiles to the and and bottom available check to see if the move is valid and return accordingly
                if(topOpen == null && bottomOpen == null){
                    // we ignore this tile
                    //System.out.println(p.getRow()+ " c: " + p.getCol());
                    //System.out.println("1 tile top and bottom null");
                    return bestVerticalMoveAt(p,new ArrayList<>(),copyMove(move));
                }
                //now do the other null cases
                if(bottomOpen == null ){
                    return bestVerticalMoveAt(topOpen, new ArrayList<>(), copyMoveAndAdd(move,topOpen, tiles.get(0)));
                }
                if(topOpen == null){
                    //System.out.println("col " + rightOpen.getCol() + "row " + rightOpen.getRow());
                    return bestVerticalMoveAt(bottomOpen, new ArrayList<>(), copyMoveAndAdd(move,bottomOpen, tiles.get(0)));
                }

                if(topOpen== null || bottomOpen == null){
                    System.out.println("error tile size1 case left and right open should not be null!");
                }

                //if we get this far we check to see which move returned has a the highest score
                moveT  = bestVerticalMoveAt(topOpen, new ArrayList<>(), copyMoveAndAdd(move,topOpen, tiles.get(0)));
                moveB = bestVerticalMoveAt(bottomOpen, new ArrayList<>(), copyMoveAndAdd(move,bottomOpen, tiles.get(0)));

                //if both sides result in null moves then we return null
                if(moveT == null && moveB == null){
                    return null;
                }

                //if one case is null return the non null this will have a better score by being valid :)
                if(moveT == null){
                    return moveB;
                }
                if(moveB == null){
                    return moveT;
                }

                //if get this far both sides are valid get the scores and return the max
                int scoreT = rules.calcScore(moveT, board);
                int scoreB = rules.calcScore(moveB, board);

                if(scoreT >= scoreB){
                    return moveT;
                } else{
                    return moveB;
                }

            }
            else if(tiles.size()>1) {

                //System.out.println("got here! tile size greater than 1");
                //System.out.println(tiles.size());
                //if we get this far the tray of tiles is more than one and we loop through it keeping the max score
                //first lets get the first open left and right points
                HashMap<ScrabbleBoardPoint, ScrabbleTile> moveT = null;
                HashMap<ScrabbleBoardPoint, ScrabbleTile> moveB = null;
                HashMap<ScrabbleBoardPoint, ScrabbleTile> maxMove = move;

                ScrabbleBoardPoint topOpen = getTopOpenP(p, maxMove);
                ScrabbleBoardPoint bottomOpen = getBottomOpenP(p, maxMove);


                for (ScrabbleTile t : tiles) {
                    //if both of these are null then it doesnt matter how many tiles we have we cant even play them
                    if (topOpen == null && bottomOpen == null) {
                        //reduce
                        //HashMap<ScrabbleBoardPoint, ScrabbleTile> temp = bestVerticalMoveAt(p, copyTilesWithNoT(tiles, t), maxMove);
                        //System.out.println(temp);
                        return bestVerticalMoveAt(p, copyTilesWithNoT(tiles, t), copyMove(maxMove));
                    }


                    //in this case we can only build right
                    if (topOpen == null) {
                        moveB = bestVerticalMoveAt(bottomOpen, copyTilesWithNoT(tiles, t), copyMoveAndAdd(maxMove, bottomOpen, t));
                        //System.out.println("t is null: " + moveB);
                        maxMove = getMaxMove(moveB, maxMove);
                        //continue to the next tile
                        continue;

                    }
                    //now do the case if we can only build left
                    if (bottomOpen == null) {
                        moveT = bestVerticalMoveAt(topOpen, copyTilesWithNoT(tiles, t), copyMoveAndAdd(maxMove, topOpen, t));
                        //System.out.println("b is null?: " + moveB + " max " + maxMove);
                        //printMove(maxMove);
                        maxMove = getMaxMove(moveT, maxMove);
                        continue;

                    }


                    //if we get this far we need to check the max of all possibilites
                    //System.out.println("after " +rightOpen);
                    //get the best move if we place the tile t on the right open space
                    moveB = bestVerticalMoveAt(bottomOpen, copyTilesWithNoT(tiles, t), copyMoveAndAdd(maxMove, bottomOpen, t));
                    //get the best move if we decide to put the tile on the left open space
                    moveT = bestVerticalMoveAt(topOpen, copyTilesWithNoT(tiles, t), copyMoveAndAdd(maxMove, topOpen, t));

                    //if both best moves result in nulls continue to try the next tile.
                    if (moveB == null && moveT == null) {
                        continue;
                    }
                    //if only the moveL returns something valid
                    if (moveB == null) {
                        maxMove = getMaxMove(moveT, maxMove);
                        continue;
                    }
                    //if only the moveR returns somthing valid
                    if (moveT == null) {
                        maxMove = getMaxMove(moveB, maxMove);
                        continue;
                    }
                    //if we get this far then we get the Maxmove of all 3
                    maxMove = getMaxMove(getMaxMove(moveT, moveB), maxMove);

                }
                if(maxMove != null && !rules.isMoveValid(maxMove,board)){
                    //System.out.println("the maxMOVE is not valid why are you sending it back?");
                    maxMove = null;
                }

                return maxMove;
            }
            else {
                //System.out.println(tiles.size());
                System.out.println("this should never run!");
                return null;
            }

        }



/**
     * I can ony think of salving this with recursion hopefully this has some recursion magic in it
     * @param p the point to find the best horizontal move against
     * @param tiles this will be a list of tiles to use to find the best move
     * @return the best horizontal move at p if there is no move it will return null
     */
    private HashMap<ScrabbleBoardPoint, ScrabbleTile> bestHorizontalMoveAt(ScrabbleBoardPoint p,
                                                                           ArrayList<ScrabbleTile> tiles,
                                                                           HashMap<ScrabbleBoardPoint, ScrabbleTile> move) {

        if(tiles == null) {
            System.out.println(tiles);
        }

        //the first edge case is if our list of tiles is empty there is no move return the move as best move
        if(tiles.isEmpty()){
            //System.out.println("I got to the tray being empty");
            //if this is empty we just check if the move is valid
            if(rules.isMoveValid(move, board)){
                return move;
            }else {

                return null;
            }
        }
        //now the edge case of 1 tile will return move with the max score or null if there isnt any
        else if(tiles.size() == 1){
            //System.out.println("entering tile size 1 case");
            HashMap<ScrabbleBoardPoint, ScrabbleTile> moveL;
            HashMap<ScrabbleBoardPoint, ScrabbleTile> moveR;

            ScrabbleBoardPoint leftOpen = getLeftOpenP(p,move);
            ScrabbleBoardPoint rightOpen = getRightOpenP(p,move);

            //if there is no tiles to the left or right available check to see if the move is valid and return accordingly
            if(leftOpen == null && rightOpen == null){
                // we ignore this tile
                return bestHorizontalMoveAt(p,new ArrayList<>(),move);
            }
            //now do the other null cases
            if(rightOpen == null ){
                return bestHorizontalMoveAt(leftOpen, new ArrayList<>(), copyMoveAndAdd(move,leftOpen, tiles.get(0)));
            }
            if(leftOpen == null){
                //System.out.println("col " + rightOpen.getCol() + "row " + rightOpen.getRow());
                return bestHorizontalMoveAt(rightOpen, new ArrayList<>(), copyMoveAndAdd(move,rightOpen, tiles.get(0)));
            }

            if(leftOpen== null || rightOpen == null){
                System.out.println("error tile size1 case left and right open should not be null!");
            }

            //if we get this far we check to see which move returned has a the highest score
            moveL  = bestHorizontalMoveAt(leftOpen, new ArrayList<>(), copyMoveAndAdd(move,leftOpen, tiles.get(0)));
            moveR = bestHorizontalMoveAt(rightOpen, new ArrayList<>(), copyMoveAndAdd(move,rightOpen, tiles.get(0)));

            //if both sides result in null moves then we return null
            if(moveL == null && moveR == null){
                return null;
            }
            //if one case is null return the non null this will have a better score by being valid :)
            if(moveL == null){
                return moveR;
            }
            if(moveR == null){
                return moveL;
            }
            //if get this far both sides are valid get the scores and return the max
            int scoreL = rules.calcScore(moveL, board);
            int scoreR = rules.calcScore(moveR, board);

            if(scoreL >= scoreR){
                return moveL;
            } else{
                return moveR;
            }

        }

        else if(tiles.size()>1) {

            //System.out.println("got here! tile size greater than 1");
            //System.out.println(tiles.size());
            //if we get this far the tray of tiles is more than one and we loop through it keeping the max score
            //first lets get the first open left and right points
            HashMap<ScrabbleBoardPoint, ScrabbleTile> moveL = null;
            HashMap<ScrabbleBoardPoint, ScrabbleTile> moveR = null;
            HashMap<ScrabbleBoardPoint, ScrabbleTile> maxMove = move;

            ScrabbleBoardPoint leftOpen = getLeftOpenP(p, maxMove);
            ScrabbleBoardPoint rightOpen = getRightOpenP(p, maxMove);


            for (ScrabbleTile t : tiles) {
                //if both of these are null then it doesnt matter how many tiles we have we cant even play them
                if (leftOpen == null && rightOpen == null) {
                    return bestHorizontalMoveAt(p, copyTilesWithNoT(tiles, t), maxMove);
                }


                //in this case we can only build right
                if (leftOpen == null) {
                    moveR = bestHorizontalMoveAt(rightOpen, copyTilesWithNoT(tiles, t), copyMoveAndAdd(maxMove, rightOpen, t));

                    maxMove = getMaxMove(moveR, maxMove);
                    //continue to the next tile
                    continue;

                }
                //now do the case if we can only build left
                if (rightOpen == null) {
                    moveL = bestHorizontalMoveAt(leftOpen, copyTilesWithNoT(tiles, t), copyMoveAndAdd(maxMove, leftOpen, t));

                    maxMove = getMaxMove(moveL, maxMove);
                    continue;

                }


                //if we get this far we need to check the max of all possibilites
                //System.out.println("after " +rightOpen);
                //get the best move if we place the tile t on the right open space
                moveR = bestHorizontalMoveAt(rightOpen, copyTilesWithNoT(tiles, t), copyMoveAndAdd(maxMove, rightOpen, t));
                //get the best move if we decide to put the tile on the left open space
                moveL = bestHorizontalMoveAt(leftOpen, copyTilesWithNoT(tiles, t), copyMoveAndAdd(maxMove, leftOpen, t));

                //if both best moves result in nulls continue to try the next tile.
                if (moveR == null && moveL == null) {
                    continue;
                }
                //if only the moveL returns something valid
                if (moveR == null) {
                    maxMove = getMaxMove(moveL, maxMove);
                    continue;
                }
                //if only the moveR returns somthing valid
                if (moveL == null) {
                    maxMove = getMaxMove(moveR, maxMove);
                    continue;
                }
                //if we get this far then we get the Maxmove of all 3
                maxMove = getMaxMove(getMaxMove(moveL, moveR), maxMove);


            }

            return maxMove;
        }
        else {
            //System.out.println(tiles.size());
            System.out.println("this should never run!");
            return null;
        }
    }



    /**
     * returns the move with the better score
     * @param move
     * @param maxMove
     * @return
     */
    private HashMap<ScrabbleBoardPoint, ScrabbleTile> getMaxMove(HashMap<ScrabbleBoardPoint, ScrabbleTile> move,
                                                                 HashMap<ScrabbleBoardPoint, ScrabbleTile> maxMove) {
        if(maxMove == null){
            maxMove = move;
        }
        if(move != null){
            int score = rules.calcScore(move, board);
            int maxScore = rules.calcScore(maxMove, board);
            if(score > maxScore){
                maxMove = move;
            }
        }
        return maxMove;
    }

    /**
     * just in case the last tile was placed in netween other tiles lets add any missing tiles to the move
     * @param p
     * @param move
     * @return TODO I dont think I need this the rules will check if the move is valid with out having to consider the tiles on the baord
     */
    private HashMap<ScrabbleBoardPoint, ScrabbleTile> fullHorizontalMoveAt(ScrabbleBoardPoint p,
                                                                           HashMap<ScrabbleBoardPoint, ScrabbleTile> move) {
        ScrabbleBoardPoint firstPoint = getLeftOpenP(p,move);
        //if this is null the first point is on a edge
        if(firstPoint == null){
            firstPoint  = new ScrabbleBoardPoint(p.getRow(),0);
        }
        //else the firstpoint is to the right of the left open
        else{
            firstPoint = new ScrabbleBoardPoint(firstPoint.getRow(), firstPoint.getCol()+1);
        }

        //we cant itrate past the max size of the board
        for (int c = firstPoint.getCol(); c < board.getBoardSize()-firstPoint.getCol(); c++) {

            //if the point deosnt already exist in the move and the location on the board is null we found the end break out
            if(!move.containsKey(new ScrabbleBoardPoint(firstPoint.getRow(),c))
                    && board.readTileAt(firstPoint.getRow(), c)== null){
                break;
            }
            //if the move does not contain this point but there is a tile on the board we need to add it to the move
            if(!move.containsKey(new ScrabbleBoardPoint(firstPoint.getRow(),c))
                    && board.readTileAt(firstPoint.getRow(), c) != null){

                move.put(new ScrabbleBoardPoint(firstPoint.getRow(),c),board.readTileAt(firstPoint.getRow(), c));

            }
        }

        return move;

    }

